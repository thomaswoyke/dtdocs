<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Automatisation avec Lua on darktable 3.8 user manual</title>
    <link>https://darktable-org.github.io/dtdocs/fr/lua/</link>
    <description>Recent content in Automatisation avec Lua on darktable 3.8 user manual</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://darktable-org.github.io/dtdocs/fr/lua/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>présentation</title>
      <link>https://darktable-org.github.io/dtdocs/fr/lua/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/fr/lua/overview/</guid>
      <description>Les scripts Lua peuvent être utilisés pour définir les actions à exécuter par darktable lorsqu&amp;rsquo;un événement est déclenché. Un exemple pourrait être d&amp;rsquo;appeler une application externe lors de l&amp;rsquo;exportation de fichiers afin d&amp;rsquo;appliquer des étapes de traitement supplémentaires en dehors de darktable.
Lua est un projet indépendant fondé en 1993, fournissant un langage de script puissant, rapide, léger et intégrable. Lua est largement utilisé par de nombreuses applications open source, dans des programmes commerciaux et pour la programmation de jeux.</description>
    </item>
    
    <item>
      <title>Principes de base : fichiers luarc</title>
      <link>https://darktable-org.github.io/dtdocs/fr/lua/basic-principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/fr/lua/basic-principles/</guid>
      <description>Au démarrage, darktable lance automatiquement le scripts Lua $DARKTABLE/share/darktable/luarcet $HOME/.config/darktable/luarc (où $DARKTABLEreprésente le dossier d&amp;rsquo;installation de darktable et $HOME votre dossier utilisateur).
C&amp;rsquo;est la seule fois que darktable lance des scripts Lua de lui même. Ces scripts peuvent enregistrer des rappels pour réaliser des actions sur divers évènements de darktable. Ce mécanisme de rappel est la principale méthode de déclenchement d&amp;rsquo;actions Lua.</description>
    </item>
    
    <item>
      <title>Un exemple Lua simple</title>
      <link>https://darktable-org.github.io/dtdocs/fr/lua/a-simple-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/fr/lua/a-simple-example/</guid>
      <description>Commençons par un exemple simple qui affiche un message sur la console. Créez un fichier appelé luarc dans le répertoire de configuration de darktable (généralement $HOME/.config/darktable/) et ajoutez-y la ligne suivante :
print(&amp;quot;Hello World !&amp;quot;) Lancez darktable et vous verrez la phrase « Hello World ! » s&amp;rsquo;afficher sur la console. Rien d&amp;rsquo;extraordinaire, mais c&amp;rsquo;est un début.
À ce stade, il n&amp;rsquo;y a rien de spécifique à darktable dans le script.</description>
    </item>
    
    <item>
      <title>impression d&#39;images étiquetées</title>
      <link>https://darktable-org.github.io/dtdocs/fr/lua/printing-labeled-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/fr/lua/printing-labeled-images/</guid>
      <description>Le premier exemple nous a montré les bases mêmes de Lua et nous a permis de vérifier que tout fonctionnait correctement. Faisons maintenant quelque chose d&amp;rsquo;un peu plus complexe. Essayons d&amp;rsquo;imprimer la liste des images auxquelles est attachée l&amp;rsquo;étiquette « rouge ». Mais avant tout, qu&amp;rsquo;est-ce qu&amp;rsquo;une image ?
local darktable = require &amp;quot;darktable&amp;quot; local debug = require &amp;quot;darktable.debug&amp;quot; print(darktable.debug.dump(darktable.database[1])) L&amp;rsquo;exécution du code ci-dessus produit beaucoup de données. Nous l&amp;rsquo;examinerons dans un instant, mais regardons d&amp;rsquo;abord le code lui-même.</description>
    </item>
    
    <item>
      <title>ajouter un raccourci simple</title>
      <link>https://darktable-org.github.io/dtdocs/fr/lua/simple-shortcut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/fr/lua/simple-shortcut/</guid>
      <description>Jusqu&amp;rsquo;à présent, tous nos scripts ont fait des choses au démarrage. Ceci est d&amp;rsquo;une utilité limitée et ne nous permet pas d&amp;rsquo;interagir avec l&amp;rsquo;utilisateur. Pour faire des choses plus avancées, nous devons enregistrer une fonction qui est appelée sur un événement donné. L&amp;rsquo;événement le plus courant auquel réagir est un raccourci clavier.
darktable = require &amp;quot;darktable&amp;quot; local function hello_shortcut(event, shortcut) darktable.print(&amp;quot;Hello, I just received &#39;&amp;quot;..event.. &amp;quot;&#39; with parameter &#39;&amp;quot;..shortcut..&amp;quot;&#39;&amp;quot;) end darktable.</description>
    </item>
    
    <item>
      <title>exporter des images avec Lua</title>
      <link>https://darktable-org.github.io/dtdocs/fr/lua/exporting-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/fr/lua/exporting-images/</guid>
      <description>Jusqu&amp;rsquo;à présent, nous avons appris à utiliser Lua pour adapter darktable à notre flux de travail particulier. Voyons maintenant comment utiliser Lua pour exporter facilement des images vers un service en ligne. Si vous êtes capable de télécharger une image vers un service via la ligne de commande, vous pouvez utiliser Lua pour intégrer cela dans l&amp;rsquo;interface utilisateur de darktable.
Dans l&amp;rsquo;exemple suivant, nous utilisons Lua pour exporter via scp. Un nouveau type de stockage apparaît dans l&amp;rsquo;interface utilisateur de darktable qui exporte les images vers une cible distante via le mécanisme de copie de ssh.</description>
    </item>
    
    <item>
      <title>Constructions d&#39;éléments de l&#39;interface utilisateur</title>
      <link>https://darktable-org.github.io/dtdocs/fr/lua/building-ui-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/fr/lua/building-ui-elements/</guid>
      <description>Notre exemple précédent était un peu limité. En particulier, l&amp;rsquo;utilisation d&amp;rsquo;une préférence pour le chemin d&amp;rsquo;exportation n&amp;rsquo;est pas très élégante. Nous pouvons faire mieux en ajoutant des éléments à l&amp;rsquo;interface utilisateur dans la boîte de dialogue d&amp;rsquo;exportation.
Les éléments de l&amp;rsquo;interface utilisateur sont créés via la fonction darktable_new_widget. Cette fonction prend un paramètre type de widget et renvoie un nouvel objet pour ce widget. Vous pouvez ensuite définir divers champs dans ce widget pour définir ses paramètres.</description>
    </item>
    
    <item>
      <title>partage de scripts</title>
      <link>https://darktable-org.github.io/dtdocs/fr/lua/sharing-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/fr/lua/sharing-scripts/</guid>
      <description>Jusqu&amp;rsquo;à présent, tout notre code Lua était dans luarc. C&amp;rsquo;est un bon moyen de développer votre script mais pas très pratique pour la distribution. Nous devons en faire un module Lua dédié. Pour ce faire, nous sauvegardons le code dans un fichier séparé (ici scp-storage.lua) :
--[[ SCP STORAGE a simple storage to export images via scp AUTHOR Jérémy Rosen (jeremy.rosen@enst-bretagne.fr) INSTALLATION * copy this file in $CONFIGDIR/lua/ where CONFIGDIR is your darktable configuration directory * add the following line in the file $CONFIGDIR/luarc require &amp;quot;scp-storage&amp;quot; USAGE * select &amp;quot;Export via SCP&amp;quot; in the storage selection menu * set the target directory * export your images LICENSE GPLv2 ]] darktable = require &amp;quot;darktable&amp;quot; darktable.</description>
    </item>
    
    <item>
      <title>appeler Lua de dbus</title>
      <link>https://darktable-org.github.io/dtdocs/fr/lua/calling-from-dbus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/fr/lua/calling-from-dbus/</guid>
      <description>Il est possible d&amp;rsquo;envoyer une commande Lua à darktable via son interface DBus. La méthode org.darktable.service.Remote.Lua prend une seule chaîne de paramètre qui est interprétée comme une commande Lua. La commande est exécutée dans le contexte Lua en cours et doit retourner un nul ou une chaîne de caractères. Le résultat est retourné comme résultat de la méthode DBus.
Si l&amp;rsquo;appel Lua aboutit à une erreur, l&amp;rsquo;appel de la méthode DBus renvoie une erreur org.</description>
    </item>
    
    <item>
      <title>utiliser darktable depuis un script Lua</title>
      <link>https://darktable-org.github.io/dtdocs/fr/lua/darktable-from-lua/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/fr/lua/darktable-from-lua/</guid>
      <description>Attention : Cette fonctionnalité est très expérimentale. Il est connu que plusieurs éléments ne fonctionnent pas encore en mode bibliothèque. Des tests prudents sont hautement recommandés.
L&amp;rsquo;interface Lua vous permet d&amp;rsquo;utiliser darktable à partir de n&amp;rsquo;importe quel script Lua. Cela charge darktable en tant que bibliothèque et vous fournit une grande part de l&amp;rsquo;API Lua (comme darktable est configuré sans interface utilisateur les fonctions correspondantes ne sont pas disponibles).
Par exemple, le programme suivant écrit la liste de toutes les images dans votre bibliothèque.</description>
    </item>
    
    <item>
      <title>API Lua</title>
      <link>https://darktable-org.github.io/dtdocs/fr/lua/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/fr/lua/api/</guid>
      <description>L&amp;rsquo;API Lua de darktable est documentée avec son propre manuel comprenant une description détaillée de toutes les structures de données et fonctions. Vous pouvez télécharger le manuel de l&amp;rsquo;API à partir de (https://www.darktable.org/resources/).</description>
    </item>
    
  </channel>
</rss>
